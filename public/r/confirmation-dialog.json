{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "confirmation-dialog",
  "type": "registry:component",
  "title": "Confirmation Dialog",
  "description": "A confirmation dialog component.",
  "dependencies": [
    "zod",
    "@hookform/resolvers",
    "react-hook-form"
  ],
  "registryDependencies": [
    "button",
    "input",
    "label",
    "textarea",
    "card",
    "dialog",
    "form"
  ],
  "files": [
    {
      "path": "registry/new-york/ui/confirmation-dialog/dialogs/ConfirmDialog.tsx",
      "content": "\"use client\"\r\n\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { DialogDescription, DialogHeader, DialogTitle } from \"@/registry/new-york/ui/dialog\";\r\nimport { Trash2 } from \"lucide-react\";\r\nimport { ReactNode } from \"react\";\r\nimport { DialogProps } from \"@/registry/new-york/lib/confirmation-dialog/types\";\r\n\r\nexport interface ConfirmDialogProps<T> extends DialogProps<T> {\r\n  title: ReactNode;\r\n  description: ReactNode;\r\n}\r\n\r\nexport function ConfirmDialog<T>(props: ConfirmDialogProps<T>) {\r\n  return (\r\n    <div>\r\n      <DialogHeader>\r\n        <div className=\"flex items-center gap-3 mb-4\">\r\n          <div className=\"flex-shrink-0 w-10 h-10 bg-destructive/10 rounded-full flex items-center justify-center\">\r\n            <Trash2 className=\"w-5 h-5 text-destructive\" />\r\n          </div>\r\n          <div>\r\n            <DialogTitle className=\"text-lg font-semibold text-foreground\">\r\n              {props.title}\r\n            </DialogTitle>\r\n            <DialogDescription className=\"text-sm text-muted-foreground\">\r\n              {props.description}\r\n            </DialogDescription>\r\n          </div>\r\n        </div>\r\n      </DialogHeader>\r\n\r\n      <div className=\"flex justify-end space-x-3 pt-2\">\r\n        <Button\r\n          type=\"button\"\r\n          onClick={() => props.cancel()}\r\n          variant={\"outline\"}\r\n        >\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          variant={\"destructive\"}\r\n          type=\"submit\"\r\n          onClick={() => props.confirm()}\r\n        >\r\n          Confirm\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}",
      "type": "registry:component",
      "target": "components/confirmation-dialog/dialogs/ConfirmDialog.tsx"
    },
    {
      "path": "registry/new-york/ui/confirmation-dialog/dialogs/CountdownDialog.tsx",
      "content": "\"use client\"\r\n\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { DialogDescription, DialogHeader, DialogTitle } from \"@/registry/new-york/ui/dialog\";\r\nimport { Clock } from \"lucide-react\";\r\nimport { useEffect, useState } from 'react';\r\nimport type { DialogProps } from '@/registry/new-york/lib/confirmation-dialog/types';\r\n\r\nexport function CountdownDialog(props: DialogProps<string> & {\r\n  countdownSeconds: number;\r\n  autoConfirm?: boolean;\r\n  showProgress?: boolean;\r\n}) {\r\n  const [timeRemaining, setTimeRemaining] = useState(props.countdownSeconds);\r\n  const [isActive, setIsActive] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (timeRemaining > 0 && isActive) {\r\n      const timer = setTimeout(() => {\r\n        setTimeRemaining(prev => prev - 1);\r\n      }, 1000);\r\n      return () => clearTimeout(timer);\r\n    } else if (timeRemaining === 0 && props.autoConfirm) {\r\n      props.confirm('auto-confirmed');\r\n    }\r\n  }, [timeRemaining, isActive, props]);\r\n\r\n  const progressPercentage = ((props.countdownSeconds - timeRemaining) / props.countdownSeconds) * 100;\r\n\r\n  const handleCancel = () => {\r\n    setIsActive(false);\r\n    props.cancel();\r\n  };\r\n\r\n  const handleConfirm = () => {\r\n    setIsActive(false);\r\n    props.confirm('confirm pressed');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <DialogHeader>\r\n        <div className=\"flex items-center gap-3 mb-4\">\r\n          <div className=\"flex-shrink-0 w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\r\n            <Clock className=\"w-5 h-5 text-primary\" />\r\n          </div>\r\n          <div>\r\n            <DialogTitle className=\"text-lg font-semibold text-foreground\">\r\n              Timed Action\r\n            </DialogTitle>\r\n            <DialogDescription className=\"text-sm text-muted-foreground\">\r\n              {props.autoConfirm\r\n                ? `Auto-confirming in ${timeRemaining}s`\r\n                : `Action available in ${timeRemaining}s`\r\n              }\r\n            </DialogDescription>\r\n          </div>\r\n        </div>\r\n      </DialogHeader>\r\n      <div className=\"space-y-4\">\r\n\r\n\r\n        {/* Progress Bar */}\r\n        {props.showProgress !== false && (\r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex justify-between text-sm text-muted-foreground\">\r\n              <span>Time remaining</span>\r\n              <span>{timeRemaining}s</span>\r\n            </div>\r\n            <div className=\"w-full bg-muted rounded-full h-2\">\r\n              <div\r\n                className=\"bg-primary h-2 rounded-full transition-all duration-1000 ease-linear\"\r\n                style={{ width: `${progressPercentage}%` }}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Countdown Circle */}\r\n        <div className=\"flex justify-center py-4\">\r\n          <div className=\"relative w-16 h-16\">\r\n            <svg className=\"w-16 h-16 transform -rotate-90\" viewBox=\"0 0 64 64\">\r\n              <circle\r\n                cx=\"32\"\r\n                cy=\"32\"\r\n                r=\"28\"\r\n                stroke=\"currentColor\"\r\n                strokeWidth=\"4\"\r\n                fill=\"none\"\r\n                className=\"text-muted\"\r\n              />\r\n              <circle\r\n                cx=\"32\"\r\n                cy=\"32\"\r\n                r=\"28\"\r\n                stroke=\"currentColor\"\r\n                strokeWidth=\"4\"\r\n                fill=\"none\"\r\n                strokeDasharray={`${2 * Math.PI * 28}`}\r\n                strokeDashoffset={`${2 * Math.PI * 28 * (1 - progressPercentage / 100)}`}\r\n                className=\"text-primary transition-all duration-1000 ease-linear\"\r\n              />\r\n            </svg>\r\n            <div className=\"absolute inset-0 flex items-center justify-center\">\r\n              <span className=\"text-2xl font-bold text-foreground\">{timeRemaining}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Actions */}\r\n        <div className=\"flex justify-end space-x-3 pt-2\">\r\n          <Button\r\n            type=\"button\"\r\n            onClick={handleCancel}\r\n            variant=\"outline\"\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleConfirm}\r\n            disabled={timeRemaining > 0 && !props.autoConfirm}\r\n            variant=\"default\"\r\n          >\r\n            {timeRemaining > 0 && !props.autoConfirm\r\n              ? `Confirm (${timeRemaining}s)`\r\n              : 'Confirm'\r\n            }\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}",
      "type": "registry:component",
      "target": "components/confirmation-dialog/dialogs/CountdownDialog.tsx"
    },
    {
      "path": "registry/new-york/ui/confirmation-dialog/dialogs/DelayedActionDialog.tsx",
      "content": "\"use client\"\r\n\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { DialogDescription, DialogHeader, DialogTitle } from \"@/registry/new-york/ui/dialog\";\r\nimport { AlertTriangle, Check, Clock } from \"lucide-react\";\r\nimport { useEffect, useState } from 'react';\r\nimport { DialogProps } from '@/registry/new-york/lib/confirmation-dialog/types';\r\n\r\ninterface DelayedActionDialogProps extends DialogProps<boolean> {\r\n  delaySeconds: number;\r\n  warningMessage?: string;\r\n  allowCancel?: boolean;\r\n  dangerAction?: boolean;\r\n}\r\n\r\nexport function DelayedActionDialog(props: DelayedActionDialogProps) {\r\n  const [timeRemaining, setTimeRemaining] = useState(props.delaySeconds);\r\n  const [canInteract, setCanInteract] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (timeRemaining > 0) {\r\n      const timer = setTimeout(() => {\r\n        setTimeRemaining(prev => prev - 1);\r\n      }, 1000);\r\n      return () => clearTimeout(timer);\r\n    } else {\r\n      setCanInteract(true);\r\n    }\r\n  }, [timeRemaining]);\r\n\r\n  const progressPercentage = ((props.delaySeconds - timeRemaining) / props.delaySeconds) * 100;\r\n\r\n  const handleConfirm = () => {\r\n    if (canInteract) {\r\n      props.confirm(true);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    if (props.allowCancel !== false) {\r\n      props.cancel();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <DialogHeader>\r\n        <div className=\"flex items-center gap-3 mb-4\">\r\n          <div className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center ${\r\n            props.dangerAction\r\n              ? 'bg-destructive/10'\r\n              : 'bg-orange-500/10'\r\n          }`}>\r\n            {props.dangerAction ? (\r\n              <AlertTriangle className=\"w-5 h-5 text-destructive\" />\r\n            ) : (\r\n              <Clock className=\"w-5 h-5 text-orange-500\" />\r\n            )}\r\n          </div>\r\n          <div>\r\n            <DialogTitle className=\"text-lg font-semibold text-foreground\">\r\n              Please Wait\r\n            </DialogTitle>\r\n            <DialogDescription className=\"text-sm text-muted-foreground\">\r\n              {canInteract\r\n                ? 'You can now proceed'\r\n                : `Please wait ${timeRemaining} seconds before continuing`\r\n              }\r\n            </DialogDescription>\r\n          </div>\r\n        </div>\r\n      </DialogHeader>\r\n      <div className=\"space-y-4\">\r\n\r\n        {/* Warning Message */}\r\n        {props.warningMessage && (\r\n          <div className={`p-3 rounded-md border-l-4 ${\r\n            props.dangerAction\r\n              ? 'bg-destructive/5 border-destructive text-destructive-foreground'\r\n              : 'bg-orange-50 border-orange-500 text-orange-700 dark:bg-orange-950 dark:text-orange-300'\r\n          }`}>\r\n            <p className=\"text-sm font-medium\">{props.warningMessage}</p>\r\n          </div>\r\n        )}\r\n\r\n\r\n        {/* Progress Indicators */}\r\n        {!canInteract && (\r\n          <div className=\"space-y-4\">\r\n            {/* Progress Bar */}\r\n            <div className=\"space-y-2\">\r\n              <div className=\"flex justify-between text-sm text-muted-foreground\">\r\n                <span>Time remaining</span>\r\n                <span>{timeRemaining}s</span>\r\n              </div>\r\n              <div className=\"w-full bg-muted rounded-full h-2\">\r\n                <div\r\n                  className={`h-2 rounded-full transition-all duration-1000 ease-linear ${\r\n                    props.dangerAction ? 'bg-destructive' : 'bg-orange-500'\r\n                  }`}\r\n                  style={{ width: `${progressPercentage}%` }}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* Countdown Circle */}\r\n            <div className=\"flex justify-center py-2\">\r\n              <div className=\"relative w-12 h-12\">\r\n                <svg className=\"w-12 h-12 transform -rotate-90\" viewBox=\"0 0 48 48\">\r\n                  <circle\r\n                    cx=\"24\"\r\n                    cy=\"24\"\r\n                    r=\"20\"\r\n                    stroke=\"currentColor\"\r\n                    strokeWidth=\"3\"\r\n                    fill=\"none\"\r\n                    className=\"text-muted\"\r\n                  />\r\n                  <circle\r\n                    cx=\"24\"\r\n                    cy=\"24\"\r\n                    r=\"20\"\r\n                    stroke=\"currentColor\"\r\n                    strokeWidth=\"3\"\r\n                    fill=\"none\"\r\n                    strokeDasharray={`${2 * Math.PI * 20}`}\r\n                    strokeDashoffset={`${2 * Math.PI * 20 * (1 - progressPercentage / 100)}`}\r\n                    className={`transition-all duration-1000 ease-linear ${\r\n                      props.dangerAction ? 'text-destructive' : 'text-orange-500'\r\n                    }`}\r\n                  />\r\n                </svg>\r\n                <div className=\"absolute inset-0 flex items-center justify-center\">\r\n                  <span className=\"text-lg font-bold text-foreground\">{timeRemaining}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Success State */}\r\n        {canInteract && (\r\n          <div className=\"flex justify-center py-4\">\r\n            <div className=\"flex items-center gap-2 text-green-600 dark:text-green-400\">\r\n              <Check className=\"w-6 h-6\" />\r\n              <span className=\"font-medium\">Ready to proceed</span>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Actions */}\r\n        <div className=\"flex justify-end space-x-3 pt-2\">\r\n          {(props.allowCancel !== false) && (\r\n            <Button\r\n              type=\"button\"\r\n              onClick={handleCancel}\r\n              variant=\"outline\"\r\n            >\r\n              Cancel\r\n            </Button>\r\n          )}\r\n          <Button\r\n            onClick={handleConfirm}\r\n            disabled={!canInteract}\r\n            variant={props.dangerAction ? \"destructive\" : \"default\"}\r\n          >\r\n            {!canInteract\r\n              ? `Please wait (${timeRemaining}s)`\r\n              : props.dangerAction\r\n              ? 'Confirm Action'\r\n              : 'Continue'\r\n            }\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}",
      "type": "registry:component",
      "target": "components/confirmation-dialog/dialogs/DelayedActionDialog.tsx"
    },
    {
      "path": "registry/new-york/ui/confirmation-dialog/dialogs/TypeToConfirmDialog.tsx",
      "content": "\"use client\"\r\n\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { DialogDescription, DialogHeader, DialogTitle } from \"@/registry/new-york/ui/dialog\";\r\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/registry/new-york/ui/form\";\r\nimport { Input } from \"@/registry/new-york/ui/input\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { Trash2 } from \"lucide-react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { z } from \"zod\";\r\nimport { DialogProps } from \"@/registry/new-york/lib/confirmation-dialog/types\";\r\n\r\nexport function TypeToConfirmDialog(props: DialogProps<{itemName: string}> & { itemName: string }) {\r\n  const schema = z.object({\r\n    itemName: z.literal(props.itemName)\r\n  })\r\n  const form = useForm({\r\n    resolver: zodResolver(schema),\r\n    defaultValues: {\r\n      itemName: ''\r\n    }\r\n  })\r\n\r\n  const handleSubmit = (data: z.infer<typeof schema>) => {\r\n    props.confirm(data);\r\n  }\r\n\r\n  const isFormValid = form.formState.isValid && form.watch('itemName') === props.itemName;\r\n\r\n  return (\r\n    <div>\r\n      <DialogHeader>\r\n        <div className=\"flex items-center gap-3 mb-4\">\r\n          <div className=\"flex-shrink-0 w-10 h-10 bg-destructive/10 rounded-full flex items-center justify-center\">\r\n            <Trash2 className=\"w-5 h-5 text-destructive\" />\r\n          </div>\r\n          <div>\r\n            <DialogTitle className=\"text-lg font-semibold text-foreground\">\r\n              Delete Confirmation\r\n            </DialogTitle>\r\n            <DialogDescription className=\"text-sm text-muted-foreground\">\r\n              This action cannot be undone\r\n            </DialogDescription>\r\n          </div>\r\n        </div>\r\n      </DialogHeader>\r\n      <Form {...form}>\r\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\r\n          <div>\r\n            <div className=\"mb-4\">\r\n              <p className=\"text-foreground mb-3\">\r\n                To confirm deletion of <code className=\"bg-muted px-2 py-1 rounded text-sm font-mono\">{props.itemName}</code>, please type the exact name below:\r\n              </p>\r\n              <FormField\r\n                control={form.control}\r\n                name=\"itemName\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel className=\"text-sm font-medium\">Type to confirm</FormLabel>\r\n                    <FormControl>\r\n                      <Input\r\n                        placeholder={`Type: ${props.itemName}`}\r\n                        {...field}\r\n                        className=\"font-mono\"\r\n                        autoComplete=\"off\"\r\n                        autoFocus\r\n                      />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n              {form.watch('itemName') && form.watch('itemName') !== props.itemName && (\r\n                <p className=\"text-sm text-muted-foreground mt-2\">\r\n                  Text must match exactly: <span className=\"font-mono\">{props.itemName}</span>\r\n                </p>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"flex justify-end space-x-3 pt-2\">\r\n            <Button\r\n              type=\"button\"\r\n              onClick={() => props.cancel()}\r\n              variant={\"outline\"}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              variant={\"destructive\"}\r\n              type=\"submit\"\r\n              disabled={!isFormValid}\r\n            >\r\n              Delete Forever\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </Form>\r\n    </div>\r\n  );\r\n}",
      "type": "registry:component",
      "target": "components/confirmation-dialog/dialogs/TypeToConfirmDialog.tsx"
    },
    {
      "path": "registry/new-york/ui/confirmation-dialog/dialog-provider.tsx",
      "content": "\"use client\"\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { type DialogProps, DismissReason } from '@/registry/new-york/lib/confirmation-dialog/types';\r\nimport { dialogObservable } from '@/registry/new-york/lib/confirmation-dialog/state';\r\nimport { Dialog, DialogContent } from '@/registry/new-york/ui/dialog';\r\n\r\nfunction ConfirmationDialog(props: DialogProps) {\r\n\r\n  useEffect(() => {\r\n    props.onOpen?.();\r\n    return () => props.onClose?.();\r\n  }, [props]);\r\n\r\n  const handleBackdropClick = () => {\r\n    dialogObservable.dismissDialog(props.id, DismissReason.BACKDROP_CLICK);\r\n  };\r\n\r\n  const confirm = (value?: unknown) => {\r\n    dialogObservable.confirmDialog(props.id, value);\r\n  };\r\n\r\n  const deny = (value?: unknown) => {\r\n    dialogObservable.denyDialog(props.id, value);\r\n  };\r\n\r\n  const cancel = () => {\r\n    dialogObservable.dismissDialog(props.id, DismissReason.CANCEL);\r\n  };\r\n\r\n  const dismiss = (reason: DismissReason, value?: unknown) => {\r\n    dialogObservable.dismissDialog(props.id, reason, value);\r\n  };\r\n\r\n  const closeDialog = () => {\r\n    dialogObservable.dismissDialog(props.id, DismissReason.CLOSE);\r\n  };\r\n\r\n  const renderProps: DialogProps = {\r\n    ...props,\r\n    confirm,\r\n    deny,\r\n    cancel,\r\n    dismiss,\r\n    closeDialog,\r\n  };\r\n\r\n  return (\r\n    <Dialog open={props.open} onOpenChange={props.onOpenChange}>\r\n      <DialogContent\r\n        onInteractOutside={e => {\r\n          if (props.important) { e.preventDefault() } else { handleBackdropClick() }\r\n        }}\r\n      >\r\n        {props.render && props.render(renderProps)}\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport function DialogProvider() {\r\n  const [dialogs, setDialogs] = useState<DialogProps[]>([]);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = dialogObservable.subscribe((action, data) => {\r\n      switch (action) {\r\n        case 'SHOW_DIALOG':\r\n          const dialogData = data as DialogProps;\r\n          setDialogs(current => [...current, {\r\n            ...dialogData,\r\n            open: true,\r\n            onOpenChange: (open: boolean) => {\r\n              if (!open) {\r\n                dialogObservable.dismissDialog(dialogData.id, DismissReason.CLOSE);\r\n              }\r\n            }\r\n          } as DialogProps]);\r\n          break;\r\n        case 'HIDE_DIALOG':\r\n          setDialogs(current => current.filter(d => d.id !== data.id));\r\n          break;\r\n      }\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {dialogs.map(dialog => (\r\n        <ConfirmationDialog\r\n          key={dialog.id}\r\n          {...dialog}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n}",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york/lib/confirmation-dialog/dialog.ts",
      "content": "import React from 'react';\r\nimport { ConfirmDialog } from '@/registry/new-york/ui/confirmation-dialog/dialogs/ConfirmDialog';\r\nimport { CountdownDialog } from '@/registry/new-york/ui/confirmation-dialog/dialogs/CountdownDialog';\r\nimport { DelayedActionDialog } from '@/registry/new-york/ui/confirmation-dialog/dialogs/DelayedActionDialog';\r\nimport { TypeToConfirmDialog } from '@/registry/new-york/ui/confirmation-dialog/dialogs/TypeToConfirmDialog';\r\nimport { dialogObservable } from '@/registry/new-york/lib/confirmation-dialog/state';\r\nimport { DialogProps, DialogResult, DismissReason } from '@/registry/new-york/lib/confirmation-dialog/types';\r\n\r\n\r\n\r\nexport const dialog = <TValue = unknown>(\r\n  render: (props: DialogProps<TValue>) => React.ReactNode,\r\n  options?: Partial<DialogProps<TValue>>\r\n): Promise<DialogResult<TValue>> => {\r\n  return dialogObservable.showDialog({\r\n    render,\r\n    ...options\r\n  });\r\n};\r\n\r\ndialog.dismiss = (id?: string, reason: DismissReason = DismissReason.CLOSE, value?: unknown) => {\r\n  if (id) {\r\n    dialogObservable.dismissDialog(id, reason, value);\r\n  } else {\r\n    dialogObservable.dismissAllDialogs(reason, value);\r\n  }\r\n};\r\n\r\n\r\nconst deleteConfirmDialog = ({\r\n  itemName,\r\n  ...options\r\n}: {\r\n  itemName: string;\r\n} & Partial<DialogProps<{itemName: string}>>): Promise<DialogResult<{itemName: string}>> => {\r\n  return dialog<{itemName: string}>(\r\n    (props) => TypeToConfirmDialog({ ...props, itemName }),\r\n    { important: true, ...options }\r\n  );\r\n}\r\n\r\nconst countdownDialog = ({\r\n  countdownSeconds,\r\n  autoConfirm,\r\n  showProgress,\r\n  ...options\r\n}: {\r\n  countdownSeconds: number;\r\n  autoConfirm?: boolean;\r\n  showProgress?: boolean;\r\n} & Partial<DialogProps<string>>): Promise<DialogResult<string>> => {\r\n  return dialog<string>(\r\n    (props) => CountdownDialog({\r\n      ...props,\r\n      countdownSeconds,\r\n      autoConfirm,\r\n      showProgress,\r\n    }),\r\n    options\r\n  );\r\n}\r\n\r\nconst delayedActionDialog = ({\r\n  delaySeconds,\r\n  warningMessage,\r\n  allowCancel,\r\n  dangerAction,\r\n  ...options\r\n}: {\r\n  delaySeconds: number;\r\n  warningMessage?: string;\r\n  allowCancel?: boolean;\r\n  dangerAction?: boolean;\r\n} & Partial<DialogProps<boolean>>): Promise<DialogResult<boolean>> => {\r\n  return dialog<boolean>(\r\n    (props) => DelayedActionDialog({\r\n      ...props,\r\n      delaySeconds,\r\n      warningMessage,\r\n      allowCancel,\r\n      dangerAction,\r\n    }),\r\n    options\r\n  );\r\n}\r\n\r\nconst typeToConfirmDialog = ({\r\n  itemName,\r\n  ...options\r\n}: {\r\n  itemName: string;\r\n} & Partial<DialogProps<{itemName: string}>>): Promise<DialogResult<{itemName: string}>> => {\r\n  return dialog<{itemName: string}>(\r\n    (props) => TypeToConfirmDialog({ ...props, itemName }),\r\n    { important: true, ...options }\r\n  );\r\n}\r\n\r\nconst confirm = ({\r\n  title,\r\n  description,\r\n  ...options\r\n}: {\r\n  title: string;\r\n  description: string;\r\n} & Partial<DialogProps<boolean>>)=> {\r\n  return dialog(\r\n    (props) => ConfirmDialog<boolean>({ ...props, title, description }),\r\n    { important: true, ...options }\r\n  );\r\n}\r\n\r\ndialog.delete = deleteConfirmDialog;\r\ndialog.countdown = countdownDialog;\r\ndialog.delayedAction = delayedActionDialog;\r\ndialog.typeToConfirm = typeToConfirmDialog;\r\ndialog.confirm = confirm;",
      "type": "registry:lib",
      "target": "lib/confirmation-dialog/dialog.ts"
    },
    {
      "path": "registry/new-york/lib/confirmation-dialog/state.ts",
      "content": "import type { DialogProps, DialogResult, DismissReason } from '@/registry/new-york/lib/confirmation-dialog/types';\r\n\r\nexport class DialogObservable {\r\n  private subscribers: Array<(action: 'SHOW_DIALOG' | 'HIDE_DIALOG', data: Partial<DialogProps>) => void> = [];\r\n  private dialogId = 0;\r\n  private pendingDialogs = new Map<string, { resolve: (value: DialogResult<unknown>) => void;  }>();\r\n\r\n  subscribe(callback: (action: 'SHOW_DIALOG' | 'HIDE_DIALOG', data: Partial<DialogProps>) => void) {\r\n    this.subscribers.push(callback);\r\n    return () => {\r\n      this.subscribers = this.subscribers.filter(sub => sub !== callback);\r\n    };\r\n  }\r\n\r\n  private notify<T = unknown>(action: 'SHOW_DIALOG' | 'HIDE_DIALOG', data: Partial<DialogProps<T>>) {\r\n    this.subscribers.forEach(callback => callback(action, data as Partial<DialogProps>));\r\n  }\r\n\r\n  async showDialog<T>(props: Partial<DialogProps<T>>): Promise<DialogResult<T>> {\r\n    const id = props.id || `dialog-${++this.dialogId}`;\r\n\r\n    return new Promise((resolve) => {\r\n      this.pendingDialogs.set(id, { resolve: resolve as (value: DialogResult<unknown>) => void });\r\n      this.notify<T>('SHOW_DIALOG', {\r\n        id,\r\n        ...props,\r\n      });\r\n    });\r\n  }\r\n\r\n  confirmDialog(id: string, value?: unknown) {\r\n    const dialog = this.pendingDialogs.get(id);\r\n    if (dialog) {\r\n      dialog.resolve({\r\n        id,\r\n        isConfirmed: true,\r\n        isDenied: false,\r\n        isDismissed: false,\r\n        value,\r\n      });\r\n      this.pendingDialogs.delete(id);\r\n      this.notify('HIDE_DIALOG', { id });\r\n    }\r\n  }\r\n\r\n  denyDialog(id: string, value?: unknown) {\r\n    const dialog = this.pendingDialogs.get(id);\r\n    if (dialog) {\r\n      dialog.resolve({\r\n        id,\r\n        isConfirmed: false,\r\n        isDenied: true,\r\n        isDismissed: false,\r\n        value,\r\n      });\r\n      this.pendingDialogs.delete(id);\r\n      this.notify('HIDE_DIALOG', { id });\r\n    }\r\n  }\r\n\r\n  dismissDialog(id: string, reason: DismissReason, value?: unknown) {\r\n    const dialog = this.pendingDialogs.get(id);\r\n    if (dialog) {\r\n      dialog.resolve({\r\n        id,\r\n        isConfirmed: false,\r\n        isDenied: false,\r\n        isDismissed: true,\r\n        value,\r\n        dismissReason: reason,\r\n      });\r\n      this.pendingDialogs.delete(id);\r\n      this.notify('HIDE_DIALOG', { id });\r\n    }\r\n  }\r\n\r\n  dismissAllDialogs(reason: DismissReason, value?: unknown) {\r\n    // Get all current dialog IDs\r\n    const dialogIds = Array.from(this.pendingDialogs.keys());\r\n\r\n    // Dismiss each dialog\r\n    dialogIds.forEach(id => {\r\n      this.dismissDialog(id, reason, value);\r\n    });\r\n  }\r\n}\r\n\r\nexport const dialogObservable = new DialogObservable();",
      "type": "registry:lib",
      "target": "lib/confirmation-dialog/state.ts"
    },
    {
      "path": "registry/new-york/lib/confirmation-dialog/types.ts",
      "content": "export interface DialogProps<T = unknown> {\r\n  id: string;\r\n  open: boolean;\r\n  onOpenChange: (open: boolean) => void;\r\n  important?: boolean;\r\n  onOpen?: () => void;\r\n  onClose?: () => void;\r\n  render: (props: DialogProps<T>) => React.ReactNode;\r\n  confirm: (value?: T) => void;\r\n  deny: (value?: T) => void;\r\n  cancel: () => void;\r\n  dismiss: (reason: DismissReason, value?: T) => void;\r\n  closeDialog: () => void;\r\n}\r\n\r\nexport enum DismissReason {\r\n  BACKDROP_CLICK = 'backdrop',\r\n  CANCEL = 'cancel',\r\n  CLOSE = 'close',\r\n  ESC = 'esc',\r\n  TIMER = 'timer',\r\n  OVERLAY = 'overlay'\r\n}\r\n\r\nexport interface DialogResult<T = unknown> {\r\n  id: string;\r\n  isConfirmed: boolean;\r\n  isDenied: boolean;\r\n  isDismissed: boolean;\r\n  value?: T;\r\n  dismissReason?: DismissReason;\r\n}\r\n\r\nexport type DismissData<T = unknown> = {\r\n  reason: DismissReason;\r\n  value?: T;\r\n}",
      "type": "registry:lib",
      "target": "lib/confirmation-dialog/types.ts"
    }
  ]
}