{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dynamic-dialog",
  "type": "registry:component",
  "title": "Dynamic Dialog",
  "description": "A dynamic dialog component.",
  "dependencies": [
    "zod",
    "@hookform/resolvers",
    "react-hook-form"
  ],
  "registryDependencies": [
    "button",
    "input",
    "label",
    "textarea",
    "card",
    "dialog",
    "form"
  ],
  "files": [
    {
      "path": "registry/new-york/ui/dynamic-dialog/dialogs/ConfirmDialog.tsx",
      "content": "\"use client\"\r\n\r\nimport { type DialogRendererProps } from \"@/registry/new-york/lib/dynamic-dialog/types\";\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { DialogDescription, DialogHeader, DialogTitle } from \"@/registry/new-york/ui/dialog\";\r\nimport { Trash2 } from \"lucide-react\";\r\nimport { type ReactNode } from \"react\";\r\n\r\nexport interface ConfirmDialogProps{\r\n  title: ReactNode;\r\n  description: ReactNode;\r\n}\r\n\r\nexport function ConfirmDialog(props: ConfirmDialogProps & DialogRendererProps<boolean>) {\r\n  return (\r\n    <div>\r\n      <DialogHeader>\r\n        <div className=\"flex items-center gap-3 mb-4\">\r\n          <div className=\"flex-shrink-0 w-10 h-10 bg-destructive/10 rounded-full flex items-center justify-center\">\r\n            <Trash2 className=\"w-5 h-5 text-destructive\" />\r\n          </div>\r\n          <div>\r\n            <DialogTitle className=\"text-lg font-semibold text-foreground\">\r\n              {props.title}\r\n            </DialogTitle>\r\n            <DialogDescription className=\"text-sm text-muted-foreground\">\r\n              {props.description}\r\n            </DialogDescription>\r\n          </div>\r\n        </div>\r\n      </DialogHeader>\r\n\r\n      <div className=\"flex justify-end space-x-3 pt-2\">\r\n        <Button\r\n          type=\"button\"\r\n          onClick={() => props.cancel()}\r\n          variant={\"outline\"}\r\n        >\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          variant={\"destructive\"}\r\n          type=\"submit\"\r\n          onClick={() => props.confirm()}\r\n        >\r\n          Confirm\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}",
      "type": "registry:component",
      "target": "components/dynamic-dialog/dialogs/ConfirmDialog.tsx"
    },
    {
      "path": "registry/new-york/ui/dynamic-dialog/dialogs/CountdownDialog.tsx",
      "content": "\"use client\"\r\n\r\nimport { type DialogRendererProps } from '@/registry/new-york/lib/dynamic-dialog/types';\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { DialogDescription, DialogHeader, DialogTitle } from \"@/registry/new-york/ui/dialog\";\r\nimport { Clock } from \"lucide-react\";\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport interface CountdownDialogProps {\r\n  countdownSeconds: number;\r\n  autoConfirm?: boolean;\r\n  showProgress?: boolean;\r\n}\r\n\r\nexport function CountdownDialog(props: CountdownDialogProps & DialogRendererProps<string>) {\r\n  const [timeRemaining, setTimeRemaining] = useState(props.countdownSeconds);\r\n  const [isActive, setIsActive] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (timeRemaining > -1 && isActive) {\r\n      const timer = setTimeout(() => {\r\n        setTimeRemaining(prev => prev - 1);\r\n      }, 1000);\r\n      return () => clearTimeout(timer);\r\n    } else if (timeRemaining === 0 && props.autoConfirm) {\r\n      props.confirm('auto-confirmed');\r\n    }\r\n  }, [timeRemaining, isActive, props]);\r\n\r\n  const progressPercentage = ((props.countdownSeconds - timeRemaining) / props.countdownSeconds) * 100;\r\n\r\n  const handleCancel = () => {\r\n    setIsActive(false);\r\n    props.cancel();\r\n  };\r\n\r\n  const handleConfirm = () => {\r\n    setIsActive(false);\r\n    props.confirm('confirm pressed');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <DialogHeader>\r\n        <div className=\"flex items-center gap-3 mb-4\">\r\n          <div className=\"flex-shrink-0 w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\r\n            <Clock className=\"w-5 h-5 text-primary\" />\r\n          </div>\r\n          <div>\r\n            <DialogTitle className=\"text-lg font-semibold text-foreground\">\r\n              Timed Action\r\n            </DialogTitle>\r\n            <DialogDescription className=\"text-sm text-muted-foreground\">\r\n              {props.autoConfirm\r\n                ? `Auto-confirming in ${timeRemaining}s`\r\n                : `Action available in ${timeRemaining}s`\r\n              }\r\n            </DialogDescription>\r\n          </div>\r\n        </div>\r\n      </DialogHeader>\r\n      <div className=\"space-y-4\">\r\n\r\n\r\n        {/* Progress Bar */}\r\n        {props.showProgress !== false && (\r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex justify-between text-sm text-muted-foreground\">\r\n              <span>Time remaining</span>\r\n              <span>{timeRemaining}s</span>\r\n            </div>\r\n            <div className=\"w-full bg-muted rounded-full h-2\">\r\n              <div\r\n                className=\"bg-primary h-2 rounded-full transition-all duration-1000 ease-linear\"\r\n                style={{ width: `${progressPercentage}%` }}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Countdown Circle */}\r\n        <div className=\"flex justify-center py-4\">\r\n          <div className=\"relative w-16 h-16\">\r\n            <svg className=\"w-16 h-16 transform -rotate-90\" viewBox=\"0 0 64 64\">\r\n              <circle\r\n                cx=\"32\"\r\n                cy=\"32\"\r\n                r=\"28\"\r\n                stroke=\"currentColor\"\r\n                strokeWidth=\"4\"\r\n                fill=\"none\"\r\n                className=\"text-muted\"\r\n              />\r\n              <circle\r\n                cx=\"32\"\r\n                cy=\"32\"\r\n                r=\"28\"\r\n                stroke=\"currentColor\"\r\n                strokeWidth=\"4\"\r\n                fill=\"none\"\r\n                strokeDasharray={`${2 * Math.PI * 28}`}\r\n                strokeDashoffset={`${2 * Math.PI * 28 * (1 - progressPercentage / 100)}`}\r\n                className=\"text-primary transition-all duration-1000 ease-linear\"\r\n              />\r\n            </svg>\r\n            <div className=\"absolute inset-0 flex items-center justify-center\">\r\n              <span className=\"text-2xl font-bold text-foreground\">{timeRemaining}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Actions */}\r\n        <div className=\"flex justify-end space-x-3 pt-2\">\r\n          <Button\r\n            type=\"button\"\r\n            onClick={handleCancel}\r\n            variant=\"outline\"\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleConfirm}\r\n            disabled={timeRemaining > 0 && !props.autoConfirm}\r\n            variant=\"default\"\r\n          >\r\n            {timeRemaining > 0 && !props.autoConfirm\r\n              ? `Confirm (${timeRemaining}s)`\r\n              : 'Confirm'\r\n            }\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}",
      "type": "registry:component",
      "target": "components/dynamic-dialog/dialogs/CountdownDialog.tsx"
    },
    {
      "path": "registry/new-york/ui/dynamic-dialog/dialogs/DelayedActionDialog.tsx",
      "content": "\"use client\"\r\n\r\nimport { type DialogRendererProps } from '@/registry/new-york/lib/dynamic-dialog/types';\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { DialogDescription, DialogHeader, DialogTitle } from \"@/registry/new-york/ui/dialog\";\r\nimport { AlertTriangle, Check, Clock } from \"lucide-react\";\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport interface DelayedActionDialogProps {\r\n  delaySeconds: number;\r\n  warningMessage?: string;\r\n  allowCancel?: boolean;\r\n  dangerAction?: boolean;\r\n}\r\n\r\nexport function DelayedActionDialog(props: DelayedActionDialogProps & DialogRendererProps<boolean>) {\r\n  const [timeRemaining, setTimeRemaining] = useState(props.delaySeconds);\r\n  const [canInteract, setCanInteract] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (timeRemaining > 0) {\r\n      const timer = setTimeout(() => {\r\n        setTimeRemaining(prev => prev - 1);\r\n      }, 1000);\r\n      return () => clearTimeout(timer);\r\n    } else {\r\n      setCanInteract(true);\r\n    }\r\n  }, [timeRemaining]);\r\n\r\n  const progressPercentage = ((props.delaySeconds - timeRemaining) / props.delaySeconds) * 100;\r\n\r\n  const handleConfirm = () => {\r\n    if (canInteract) {\r\n      props.confirm(true);\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    if (props.allowCancel !== false) {\r\n      props.cancel();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <DialogHeader>\r\n        <div className=\"flex items-center gap-3 mb-4\">\r\n          <div className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center ${\r\n            props.dangerAction\r\n              ? 'bg-destructive/10'\r\n              : 'bg-orange-500/10'\r\n          }`}>\r\n            {props.dangerAction ? (\r\n              <AlertTriangle className=\"w-5 h-5 text-destructive\" />\r\n            ) : (\r\n              <Clock className=\"w-5 h-5 text-orange-500\" />\r\n            )}\r\n          </div>\r\n          <div>\r\n            <DialogTitle className=\"text-lg font-semibold text-foreground\">\r\n              Please Wait\r\n            </DialogTitle>\r\n            <DialogDescription className=\"text-sm text-muted-foreground\">\r\n              {canInteract\r\n                ? 'You can now proceed'\r\n                : `Please wait ${timeRemaining} seconds before continuing`\r\n              }\r\n            </DialogDescription>\r\n          </div>\r\n        </div>\r\n      </DialogHeader>\r\n      <div className=\"space-y-4\">\r\n\r\n        {/* Warning Message */}\r\n        {props.warningMessage && (\r\n          <div className={`p-3 rounded-md border-l-4 ${\r\n            props.dangerAction\r\n              ? 'bg-destructive/5 border-destructive text-destructive-foreground'\r\n              : 'bg-orange-50 border-orange-500 text-orange-700 dark:bg-orange-950 dark:text-orange-300'\r\n          }`}>\r\n            <p className=\"text-sm font-medium\">{props.warningMessage}</p>\r\n          </div>\r\n        )}\r\n\r\n\r\n        {/* Progress Indicators */}\r\n        {!canInteract && (\r\n          <div className=\"space-y-4\">\r\n            {/* Progress Bar */}\r\n            <div className=\"space-y-2\">\r\n              <div className=\"flex justify-between text-sm text-muted-foreground\">\r\n                <span>Time remaining</span>\r\n                <span>{timeRemaining}s</span>\r\n              </div>\r\n              <div className=\"w-full bg-muted rounded-full h-2\">\r\n                <div\r\n                  className={`h-2 rounded-full transition-all duration-1000 ease-linear ${\r\n                    props.dangerAction ? 'bg-destructive' : 'bg-orange-500'\r\n                  }`}\r\n                  style={{ width: `${progressPercentage}%` }}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* Countdown Circle */}\r\n            <div className=\"flex justify-center py-2\">\r\n              <div className=\"relative w-12 h-12\">\r\n                <svg className=\"w-12 h-12 transform -rotate-90\" viewBox=\"0 0 48 48\">\r\n                  <circle\r\n                    cx=\"24\"\r\n                    cy=\"24\"\r\n                    r=\"20\"\r\n                    stroke=\"currentColor\"\r\n                    strokeWidth=\"3\"\r\n                    fill=\"none\"\r\n                    className=\"text-muted\"\r\n                  />\r\n                  <circle\r\n                    cx=\"24\"\r\n                    cy=\"24\"\r\n                    r=\"20\"\r\n                    stroke=\"currentColor\"\r\n                    strokeWidth=\"3\"\r\n                    fill=\"none\"\r\n                    strokeDasharray={`${2 * Math.PI * 20}`}\r\n                    strokeDashoffset={`${2 * Math.PI * 20 * (1 - progressPercentage / 100)}`}\r\n                    className={`transition-all duration-1000 ease-linear ${\r\n                      props.dangerAction ? 'text-destructive' : 'text-orange-500'\r\n                    }`}\r\n                  />\r\n                </svg>\r\n                <div className=\"absolute inset-0 flex items-center justify-center\">\r\n                  <span className=\"text-lg font-bold text-foreground\">{timeRemaining}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Success State */}\r\n        {canInteract && (\r\n          <div className=\"flex justify-center py-4\">\r\n            <div className=\"flex items-center gap-2 text-green-600 dark:text-green-400\">\r\n              <Check className=\"w-6 h-6\" />\r\n              <span className=\"font-medium\">Ready to proceed</span>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Actions */}\r\n        <div className=\"flex justify-end space-x-3 pt-2\">\r\n          {(props.allowCancel !== false) && (\r\n            <Button\r\n              type=\"button\"\r\n              onClick={handleCancel}\r\n              variant=\"outline\"\r\n            >\r\n              Cancel\r\n            </Button>\r\n          )}\r\n          <Button\r\n            onClick={handleConfirm}\r\n            disabled={!canInteract}\r\n            variant={props.dangerAction ? \"destructive\" : \"default\"}\r\n          >\r\n            {!canInteract\r\n              ? `Please wait (${timeRemaining}s)`\r\n              : props.dangerAction\r\n              ? 'Confirm Action'\r\n              : 'Continue'\r\n            }\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}",
      "type": "registry:component",
      "target": "components/dynamic-dialog/dialogs/DelayedActionDialog.tsx"
    },
    {
      "path": "registry/new-york/ui/dynamic-dialog/dialogs/TypeToConfirmDialog.tsx",
      "content": "\"use client\"\r\n\r\nimport { Button } from \"@/registry/new-york/ui/button\";\r\nimport { DialogDescription, DialogHeader, DialogTitle } from \"@/registry/new-york/ui/dialog\";\r\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/registry/new-york/ui/form\";\r\nimport { Input } from \"@/registry/new-york/ui/input\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { Trash2 } from \"lucide-react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { z } from \"zod\";\r\nimport { type DialogRendererProps } from \"@/registry/new-york/lib/dynamic-dialog/types\";\r\n\r\nexport interface TypeToConfirmDialogProps {\r\n  itemName: string;\r\n}\r\n\r\nexport function TypeToConfirmDialog(props: TypeToConfirmDialogProps & DialogRendererProps<{itemName: string}>) {\r\n  const schema = z.object({\r\n    itemName: z.literal(props.itemName)\r\n  })\r\n  const form = useForm({\r\n    resolver: zodResolver(schema),\r\n    defaultValues: {\r\n      itemName: ''\r\n    }\r\n  })\r\n\r\n  const handleSubmit = (data: z.infer<typeof schema>) => {\r\n    props.confirm(data);\r\n  }\r\n\r\n  const isFormValid = form.formState.isValid && form.watch('itemName') === props.itemName;\r\n\r\n  return (\r\n    <div>\r\n      <DialogHeader>\r\n        <div className=\"flex items-center gap-3 mb-4\">\r\n          <div className=\"flex-shrink-0 w-10 h-10 bg-destructive/10 rounded-full flex items-center justify-center\">\r\n            <Trash2 className=\"w-5 h-5 text-destructive\" />\r\n          </div>\r\n          <div>\r\n            <DialogTitle className=\"text-lg font-semibold text-foreground\">\r\n              Delete Confirmation\r\n            </DialogTitle>\r\n            <DialogDescription className=\"text-sm text-muted-foreground\">\r\n              This action cannot be undone\r\n            </DialogDescription>\r\n          </div>\r\n        </div>\r\n      </DialogHeader>\r\n      <Form {...form}>\r\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\r\n          <div>\r\n            <div className=\"mb-4\">\r\n              <p className=\"text-foreground mb-3\">\r\n                To confirm deletion of <code className=\"bg-muted px-2 py-1 rounded text-sm font-mono\">{props.itemName}</code>, please type the exact name below:\r\n              </p>\r\n              <FormField\r\n                control={form.control}\r\n                name=\"itemName\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel className=\"text-sm font-medium\">Type to confirm</FormLabel>\r\n                    <FormControl>\r\n                      <Input\r\n                        placeholder={`Type: ${props.itemName}`}\r\n                        {...field}\r\n                        className=\"font-mono\"\r\n                        autoComplete=\"off\"\r\n                        autoFocus\r\n                      />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n              {form.watch('itemName') && form.watch('itemName') !== props.itemName && (\r\n                <p className=\"text-sm text-muted-foreground mt-2\">\r\n                  Text must match exactly: <span className=\"font-mono\">{props.itemName}</span>\r\n                </p>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"flex justify-end space-x-3 pt-2\">\r\n            <Button\r\n              type=\"button\"\r\n              onClick={() => props.cancel()}\r\n              variant={\"outline\"}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              variant={\"destructive\"}\r\n              type=\"submit\"\r\n              disabled={!isFormValid}\r\n            >\r\n              Delete Forever\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </Form>\r\n    </div>\r\n  );\r\n}",
      "type": "registry:component",
      "target": "components/dynamic-dialog/dialogs/TypeToConfirmDialog.tsx"
    },
    {
      "path": "registry/new-york/ui/dynamic-dialog/dynamic-dialog.tsx",
      "content": "\"use client\"\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport type {  DialogState, DialogRendererProps, DismissReason } from '@/registry/new-york/lib/dynamic-dialog/types';\r\nimport { dialogObservable } from '@/registry/new-york/lib/dynamic-dialog/state';\r\nimport { Dialog, DialogContent } from '@/registry/new-york/ui/dialog';\r\n\r\nfunction DynamicDialog(props: DialogState) {\r\n\r\n  useEffect(() => {\r\n    props.onOpen();\r\n    return () => props.onClose();\r\n  }, [props]);\r\n\r\n  const handleBackdropClick = () => {\r\n    dialogObservable.dismissDialog(props.id, \"backdrop\");\r\n  };\r\n\r\n  const confirm = (value?: unknown) => {\r\n    dialogObservable.confirmDialog(props.id, value);\r\n  };\r\n\r\n  const deny = (value?: unknown) => {\r\n    dialogObservable.denyDialog(props.id, value);\r\n  };\r\n\r\n  const cancel = () => {\r\n    dialogObservable.dismissDialog(props.id, \"cancel\");\r\n  };\r\n\r\n  const dismiss = (reason: DismissReason, value?: unknown) => {\r\n    dialogObservable.dismissDialog(props.id, reason, value);\r\n  };\r\n\r\n  const closeDialog = () => {\r\n    dialogObservable.dismissDialog(props.id, \"close\");\r\n  };\r\n\r\n  const renderProps: DialogRendererProps = {\r\n    ...props,\r\n    confirm,\r\n    deny,\r\n    cancel,\r\n    dismiss,\r\n    closeDialog,\r\n  };\r\n\r\n  return (\r\n    <Dialog open={props.open} onOpenChange={props.onOpenChange}>\r\n      <DialogContent\r\n        onInteractOutside={e => {\r\n          if (props.important) { e.preventDefault() } else { handleBackdropClick() }\r\n        }}\r\n      >\r\n        {props.render && props.render(renderProps)}\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport function DynamicDialogProvider() {\r\n  const [dialogs, setDialogs] = useState<DialogState[]>([]);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = dialogObservable.subscribe((action, data) => {\r\n      switch (action) {\r\n        case 'SHOW_DIALOG':\r\n          const dialogState: DialogState = {\r\n            ...data,\r\n            id: data.id!,\r\n            render: data.render!,\r\n            open: true,\r\n            onOpen: data.onOpen || (() => {}),\r\n            onClose: data.onClose || (() => {}),\r\n            onOpenChange: (open: boolean) => {\r\n              if (!open) {\r\n                dialogObservable.dismissDialog(data.id!, \"close\");\r\n              }\r\n            }\r\n          };\r\n          setDialogs(current => [...current, dialogState]);\r\n          break;\r\n        case 'HIDE_DIALOG':\r\n          setDialogs(current => current.filter(d => d.id !== data.id));\r\n          break;\r\n      }\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {dialogs.map(dialog => (\r\n        <DynamicDialog\r\n          key={dialog.id}\r\n          {...dialog}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n}",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york/lib/dynamic-dialog/dialog.ts",
      "content": "import React from 'react';\r\nimport { ConfirmDialog, type ConfirmDialogProps } from '@/registry/new-york/ui/dynamic-dialog/dialogs/ConfirmDialog';\r\nimport { CountdownDialog, type CountdownDialogProps } from '@/registry/new-york/ui/dynamic-dialog/dialogs/CountdownDialog';\r\nimport { DelayedActionDialog, type DelayedActionDialogProps } from '@/registry/new-york/ui/dynamic-dialog/dialogs/DelayedActionDialog';\r\nimport { TypeToConfirmDialog, type TypeToConfirmDialogProps } from '@/registry/new-york/ui/dynamic-dialog/dialogs/TypeToConfirmDialog';\r\nimport { dialogObservable } from '@/registry/new-york/lib/dynamic-dialog/state';\r\nimport type { DialogProps, DialogRendererProps, DialogResult, DialogUserConfig, DismissReason } from '@/registry/new-york/lib/dynamic-dialog/types';\r\n \r\n\r\n/**\r\n * Creates a dialog function that can be called with props to show a dialog.\r\n *\r\n * @param render - A function that takes dialog properties and returns a React node.\r\n * @param defaultOptions - Default dialog configuration options.\r\n * @typeParam RendererProps - Additional properties to be passed to the React Component. This type is merged with DialogRendererProps.\r\n * @typeParam TValue - The type of value that the dialog will return upon resolving.\r\n * @returns A function that accepts renderer props and dialog options to show the dialog.\r\n *\r\n * @example - Basic usage with a custom renderer:\r\n * ```ts\r\n * const customDialog = dialog<{ customProp: string }, boolean>(CustomComponent, {important: true});\r\n * const result = customDialog({ customProp: 'value' });\r\n * const value = result.value; // Promise<boolean>\r\n * const awaitedValue = await value; // boolean\r\n * const isConfirmed = result.isConfirmed; // boolean\r\n * ```\r\n * @example - Usage with dialog props for control:\r\n * ```ts\r\n * const asyncDialog = dialog<{}, string>(ExampleComponent);\r\n * const result = asyncDialog({}, { id: 'my-dialog', important: true });\r\n * const value = result.value; // string\r\n * const isConfirmed = result.isConfirmed; // boolean\r\n * ```\r\n * @example - Dismissing a dialog using dismiss helper:\r\n * ```ts\r\n * const exampleDialog = dialog<{}, void>(ExampleComponent);\r\n * const result = exampleDialog();\r\n * // Dismiss the dialog after 2 seconds\r\n * setTimeout(() => {\r\n *   result.dismiss();\r\n * }, 2000);\r\n * ```\r\n */\r\nexport const dialog = <RendererProps = unknown, TValue = unknown>(\r\n  render: (props: DialogRendererProps<TValue> & RendererProps) => React.ReactNode,\r\n  defaultOptions?: Partial<DialogProps<TValue>> & DialogUserConfig\r\n) => {\r\n  return (\r\n    rendererProps: RendererProps,\r\n    dialogOptions?: Partial<DialogProps<TValue>> & DialogUserConfig\r\n  ): DialogResult<TValue> => {\r\n    const mergedOptions = { ...defaultOptions, ...dialogOptions };\r\n\r\n    return dialogObservable.showDialog({\r\n      render: (dialogProps: DialogRendererProps<TValue>) =>\r\n        render({ ...dialogProps, ...rendererProps } as DialogRendererProps<TValue> & RendererProps),\r\n      onOpen: () => {},\r\n      onClose: () => {},\r\n      ...mergedOptions\r\n    });\r\n  };\r\n};\r\n\r\nconst dismissDialog = (id?: string, reason: DismissReason = \"close\", value?: unknown) => {\r\n  if (id) {\r\n    dialogObservable.dismissDialog(id, reason, value);\r\n  } else {\r\n    dialogObservable.dismissAllDialogs(reason, value);\r\n  }\r\n}\r\n\r\nconst typeToConfirmDialog = dialog<TypeToConfirmDialogProps, {itemName: string}>(TypeToConfirmDialog, { important: true });\r\n\r\nconst countdownDialog = dialog<CountdownDialogProps, string>(CountdownDialog);\r\n\r\nconst delayedActionDialog = dialog<DelayedActionDialogProps, boolean>(DelayedActionDialog);\r\n\r\nconst confirm = dialog<ConfirmDialogProps, boolean>(ConfirmDialog, { important: true });\r\n\r\n//* Utils\r\n\r\n/**\r\n * Dismiss a dialog by ID or all dialogs at once.\r\n * @param id - Optional dialog ID, if not provided all dialogs will be dismissed.\r\n * @param reason - The reason for dismissing the dialog.\r\n * @param value - Optional value to pass when dismissing the dialog.\r\n * @example - Dismiss a specific dialog by ID:\r\n * ```ts\r\n * const exampleDialog = exampleDialog();\r\n * dialog.dismiss(exampleDialog.id, \"cancel\", { some: 'data' });\r\n * ```\r\n * @example - Dismiss all dialogs at once:\r\n * ```ts\r\n * dialog.dismiss(undefined, \"cancel\", { some: 'data' });\r\n * // or simply\r\n * dialog.dismiss();\r\n * ```\r\n */\r\ndialog.dismiss = dismissDialog;\r\n\r\n//* Predefined dialogs\r\ndialog.countdown = countdownDialog;\r\ndialog.delayedAction = delayedActionDialog;\r\ndialog.typeToConfirm = typeToConfirmDialog;\r\ndialog.confirm = confirm;",
      "type": "registry:lib",
      "target": "lib/dynamic-dialog/dialog.ts"
    },
    {
      "path": "registry/new-york/lib/dynamic-dialog/state.ts",
      "content": "import type {\r\n  DialogProps,\r\n  DialogResult,\r\n  DialogUserConfig,\r\n  DismissReason,\r\n} from \"@/registry/new-york/lib/dynamic-dialog/types\";\r\n\r\ntype DialogData = Partial<DialogProps> & DialogUserConfig;\r\n\r\nexport class DialogObservable {\r\n  private subscribers: Array<\r\n    (action: \"SHOW_DIALOG\" | \"HIDE_DIALOG\", data: DialogData) => void\r\n  > = [];\r\n  private dialogId = 0;\r\n  private pendingDialogs = new Map<\r\n    string,\r\n    {\r\n      resolve: (value: {\r\n        id: string;\r\n        isConfirmed: boolean;\r\n        isDenied: boolean;\r\n        isDismissed: boolean;\r\n        value?: unknown;\r\n        dismissReason?: DismissReason;\r\n      }) => void;\r\n    }\r\n  >();\r\n\r\n  subscribe(\r\n    callback: (\r\n      action: \"SHOW_DIALOG\" | \"HIDE_DIALOG\",\r\n      data: DialogData\r\n    ) => void\r\n  ) {\r\n    this.subscribers.push(callback);\r\n    return () => {\r\n      this.subscribers = this.subscribers.filter((sub) => sub !== callback);\r\n    };\r\n  }\r\n\r\n  private notify(\r\n    action: \"SHOW_DIALOG\" | \"HIDE_DIALOG\",\r\n    data: DialogData\r\n  ) {\r\n    this.subscribers.forEach((callback) =>\r\n      callback(action, data)\r\n    );\r\n  }\r\n\r\n  showDialog<ReturnValue = unknown>(\r\n    props: Partial<DialogProps<ReturnValue>> & DialogUserConfig\r\n  ): DialogResult<ReturnValue> {\r\n    const id = props.id || `dialog-${++this.dialogId}`;\r\n\r\n    if (!props.render) {\r\n      throw new Error('Dialog render function is required');\r\n    }\r\n\r\n    let resolvedData: {\r\n      isConfirmed: boolean;\r\n      isDenied: boolean;\r\n      isDismissed: boolean;\r\n      value?: ReturnValue;\r\n      dismissReason?: DismissReason;\r\n    } | null = null;\r\n    let isDialogOpen = true;\r\n\r\n    const valuePromise = new Promise<ReturnValue | undefined>((resolve) => {\r\n      this.pendingDialogs.set(id, {\r\n        resolve: (result: {\r\n          id: string;\r\n          isConfirmed: boolean;\r\n          isDenied: boolean;\r\n          isDismissed: boolean;\r\n          value?: unknown;\r\n          dismissReason?: DismissReason;\r\n        }) => {\r\n          resolvedData = {\r\n            isConfirmed: result.isConfirmed,\r\n            isDenied: result.isDenied,\r\n            isDismissed: result.isDismissed,\r\n            value: result.value as ReturnValue,\r\n            dismissReason: result.dismissReason,\r\n          };\r\n          isDialogOpen = false;\r\n          resolve(result.value as ReturnValue);\r\n        },\r\n      });\r\n    });\r\n\r\n    const dismissFn = (\r\n      reason: DismissReason = \"close\",\r\n      value?: ReturnValue\r\n    ) => {\r\n      this.dismissDialog(id, reason, value);\r\n    };\r\n\r\n    this.notify(\"SHOW_DIALOG\", {\r\n      ...props,\r\n      id,\r\n      render: props.render,\r\n    });\r\n\r\n    const asyncFn = async () => {\r\n      await valuePromise;\r\n      return {\r\n        id,\r\n        isConfirmed: resolvedData?.isConfirmed ?? false,\r\n        isDenied: resolvedData?.isDenied ?? false,\r\n        isDismissed: resolvedData?.isDismissed ?? false,\r\n        value: resolvedData?.value,\r\n        dismissReason: resolvedData?.dismissReason,\r\n      };\r\n    };\r\n\r\n    return {\r\n      id,\r\n      get isConfirmed() {\r\n        return resolvedData?.isConfirmed ?? false;\r\n      },\r\n      get isDenied() {\r\n        return resolvedData?.isDenied ?? false;\r\n      },\r\n      get isDismissed() {\r\n        return resolvedData?.isDismissed ?? false;\r\n      },\r\n      get open() {\r\n        return isDialogOpen;\r\n      },\r\n      value: valuePromise,\r\n      get dismissReason() {\r\n        return resolvedData?.dismissReason;\r\n      },\r\n      dismiss: dismissFn,\r\n      async: asyncFn,\r\n    };\r\n  }\r\n\r\n  confirmDialog(id: string, value?: unknown) {\r\n    const dialog = this.pendingDialogs.get(id);\r\n    if (dialog) {\r\n      dialog.resolve({\r\n        id,\r\n        isConfirmed: true,\r\n        isDenied: false,\r\n        isDismissed: false,\r\n        value,\r\n      });\r\n      this.pendingDialogs.delete(id);\r\n      this.notify(\"HIDE_DIALOG\", { id });\r\n    }\r\n  }\r\n\r\n  denyDialog(id: string, value?: unknown) {\r\n    const dialog = this.pendingDialogs.get(id);\r\n    if (dialog) {\r\n      dialog.resolve({\r\n        id,\r\n        isConfirmed: false,\r\n        isDenied: true,\r\n        isDismissed: false,\r\n        value,\r\n      });\r\n      this.pendingDialogs.delete(id);\r\n      this.notify(\"HIDE_DIALOG\", { id });\r\n    }\r\n  }\r\n\r\n  dismissDialog(id: string, reason: DismissReason, value?: unknown) {\r\n    const dialog = this.pendingDialogs.get(id);\r\n    if (dialog) {\r\n      dialog.resolve({\r\n        id,\r\n        isConfirmed: false,\r\n        isDenied: false,\r\n        isDismissed: true,\r\n        value,\r\n        dismissReason: reason,\r\n      });\r\n      this.pendingDialogs.delete(id);\r\n      this.notify(\"HIDE_DIALOG\", { id });\r\n    }\r\n  }\r\n\r\n  dismissAllDialogs(reason: DismissReason, value?: unknown) {\r\n    // Get all current dialog IDs\r\n    const dialogIds = Array.from(this.pendingDialogs.keys());\r\n\r\n    // Dismiss each dialog\r\n    dialogIds.forEach((id) => {\r\n      this.dismissDialog(id, reason, value);\r\n    });\r\n  }\r\n}\r\n\r\nexport const dialogObservable = new DialogObservable();\r\n",
      "type": "registry:lib",
      "target": "lib/dynamic-dialog/state.ts"
    },
    {
      "path": "registry/new-york/lib/dynamic-dialog/types.ts",
      "content": "export interface DialogActions<T = unknown> {\r\n  confirm: (value?: T) => void;\r\n  deny: (value?: T) => void;\r\n  cancel: () => void;\r\n  dismiss: (reason: DismissReason, value?: T) => void;\r\n  closeDialog: () => void;\r\n}\r\n\r\nexport interface DialogCallbacks {\r\n  onOpen: () => void;\r\n  onClose: () => void;\r\n}\r\n\r\nexport interface DialogRendererProps<T = unknown> extends DialogActions<T>, DialogCallbacks {}\r\n\r\nexport type DialogUserConfig = Partial<DialogCallbacks>;\r\n\r\nexport interface DialogProps<T = unknown> {\r\n  id: string;\r\n  open: boolean;\r\n  onOpenChange: (open: boolean) => void;\r\n  important?: boolean;\r\n  render: (props: DialogRendererProps<T>) => React.ReactNode;\r\n}\r\n\r\nexport interface DialogState<T = unknown> extends DialogProps<T>, DialogCallbacks {}\r\n\r\nexport type DismissReason = Autocomplete<\"backdrop\" | \"cancel\" | \"close\" | \"esc\" | \"timer\" | \"overlay\">;\r\n\r\nexport interface DialogResult<T = unknown> {\r\n  id: string;\r\n  isConfirmed: boolean;\r\n  isDenied: boolean;\r\n  isDismissed: boolean;\r\n  open: boolean;\r\n  value: Promise<T | undefined>;\r\n  dismissReason?: DismissReason;\r\n  dismiss: (reason?: DismissReason, value?: T) => void;\r\n  async: () => Promise<{\r\n    id: string;\r\n    isConfirmed: boolean;\r\n    isDenied: boolean;\r\n    isDismissed: boolean;\r\n    value?: T;\r\n    dismissReason?: DismissReason;\r\n  }>;\r\n}\r\n\r\nexport type DismissData<T = unknown> = {\r\n  reason: DismissReason;\r\n  value?: T;\r\n};\r\n\r\nexport type Autocomplete<T extends string> = T | string & {}",
      "type": "registry:lib",
      "target": "lib/dynamic-dialog/types.ts"
    }
  ]
}